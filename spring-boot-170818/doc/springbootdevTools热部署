spring-boot-devtools 是一个为开发者服务的一个模块，其中最重要的功能就是自动应用代码更改到最新的App上面去。原理是在发现代码有更改之后，重新启动应用，但是比速度比手动停止后再启动还要更快，更快指的不是节省出来的手工操作的时间。
 
其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为  restart ClassLoader
,这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间（5秒以内）。

 

那如何使用呢，大概两个步骤即可：

 

第一就是添加相应的依赖：

 
Xml代码  收藏代码
<!--  
           devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现），      
           实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。   
           即devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），注意：因为其采用的虚拟机机制，该项重启是很快的      
        -->  
       <dependency>  
            <groupId>org.springframework.boot</groupId>  
            <artifactId>spring-boot-devtools</artifactId>  
            <optional>true</optional>  
        </dependency>  
 
 
 

第二加点：仅仅加入devtools在我们的eclipse中还不起作用，这时候还需要添加的spring-boot-maven-plugin：

 
Xml代码  收藏代码
<build>  
       <plugins>  
           <!--  
             用于将应用打成可直接运行的jar（该jar就是用于生产环境中的jar） 值得注意的是，如果没有引用spring-boot-starter-parent做parent，  
                       且采用了上述的第二种方式，这里也要做出相应的改动  
             -->  
            <plugin>  
                <groupId>org.springframework.boot</groupId>  
                <artifactId>spring-boot-maven-plugin</artifactId>  
                <configuration>  
                   <!--fork :  如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart -->  
                    <fork>true</fork>  
                </configuration>  
            </plugin>  
       </plugins>  
   </build>  
 
 
 

运行App.java  ---- Run Application --- Java Application即可进行测试。

 

测试方法：

·         修改类-->保存：应用会重启
·         修改配置文件-->保存：应用会重启
·         修改页面-->保存：应用会重启，页面会刷新（原理是将spring.thymeleaf.cache设为false）
 

 

不能使用分析：

（a）     对应的spring-boot版本是否正确，我这里使用的是1.3.3版本；
（b）     是否加入plugin了，以及属性<fork>true</fork>
（c）      Eclipse Project 是否开启了Build Automatically（我自己就在这里栽了坑，不知道为什么我的工具什么时候关闭了自动编译的功能）。
（d）     如果设置SpringApplication.setRegisterShutdownHook(false)，则自动重启将不起作用。
 

 

补充：

默认情况下，/META-INF/maven，/META-INF/resources，/resources，/static，/templates，/public这些文件夹下的文件修改不会使应用重启，但是会重新加载（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新）。

 

·         如果想改变默认的设置，可以自己设置不重启的目录：spring.devtools.restart.exclude=static/**,public/**，这样的话，就只有这两个目录下的文件修改不会导致restart操作了。
 
·         如果要在保留默认设置的基础上还要添加其他的排除目录：spring.devtools.restart.additional-exclude
 

·         如果想要使得当非classpath下的文件发生变化时应用得以重启，使用：spring.devtools.restart.additional-paths，这样devtools就会将该目录列入了监听范围。
 

 

关闭自动重启
设置 spring.devtools.restart.enabled 属性为false，可以关闭该特性。可以在application.properties中设置，也可以通过设置环境变量的方式。

publicstaticvoidmain(String[] args){
    System.setProperty("spring.devtools.restart.enabled","false");
 
    SpringApplication.run(MyApp.class, args);
    
    亲测根据上面部署可以实现热部署，在修改java文件的时候会出现自动重新启动，也就是说上面所说的两个ClassLaoder一个是加载未变化的class文件一个是加载有变化的class文件  这样在启动的时候能够提高启动速度