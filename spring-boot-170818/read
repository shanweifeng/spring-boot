很多Spring Boot开发者总是使用 @Configuration ， @EnableAutoConfiguration 和 @ComponentScan 注解他们的main类。
由于这些注解被如此频繁地一块使用（特别是你遵循以上最佳实践时），Spring Boot提供一个方便的 @SpringBootApplication 选择。
该 @SpringBootApplication 注解等价于以默认属性使用 @Configuration ， @EnableAutoConfiguration 和 @ComponentScan 。

       这是官方进行解析的，我个人自己第一次接触的时候也是有这个困惑的，希望此篇文章能解答在研究Spring Boot困惑的人。
  来源:http://412887952-qq-com.iteye.com/blog/2293849
  
  33、spring-boot-actuator模块提供了一个监控和管理生产环境的模块，可以使用http、jmx、ssh、telnet等拉管理和监控应用。审计（Auditing）、
	健康（health）、数据采集（metrics gathering）会自动加入到应用里面。

	注:对于Maven项目，可以通过 @..@ 占位符引用Maven的’project properties’。
	
	
	
	
	Spring Boot应用启动器基本的一共有N（现知道的是44）种：具体如下： 
1）spring-boot-starter
这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。

2）spring-boot-starter-actuator
帮助监控和管理应用。

3）spring-boot-starter-amqp
通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。

4）spring-boot-starter-aop
支持面向方面的编程即AOP，包括spring-aop和AspectJ。

5）spring-boot-starter-artemis
通过Apache Artemis支持JMS的API（Java Message Service API）。

6）spring-boot-starter-batch
支持Spring Batch，包括HSQLDB数据库。

7）spring-boot-starter-cache
支持Spring的Cache抽象。

8）spring-boot-starter-cloud-connectors
支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。

9）spring-boot-starter-data-elasticsearch
支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。

10）spring-boot-starter-data-gemfire
支持GemFire分布式数据存储，包括spring-data-gemfire。

11）spring-boot-starter-data-jpa
支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。
 
12）spring-boot-starter-data-mongodb
支持MongoDB数据，包括spring-data-mongodb。
 
13）spring-boot-starter-data-rest
通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。
 
14）spring-boot-starter-data-solr
支持Apache Solr搜索平台，包括spring-data-solr。
 
15）spring-boot-starter-freemarker
支持FreeMarker模板引擎。
 
16）spring-boot-starter-groovy-templates
支持Groovy模板引擎。
 
17）spring-boot-starter-hateoas
通过spring-hateoas支持基于HATEOAS的RESTful Web服务。
 
18）spring-boot-starter-hornetq
通过HornetQ支持JMS。
 
19）spring-boot-starter-integration
支持通用的spring-integration模块。
 
20）spring-boot-starter-jdbc
支持JDBC数据库。
 
21）spring-boot-starter-jersey
支持Jersey RESTful Web服务框架。
 
22）spring-boot-starter-jta-atomikos
通过Atomikos支持JTA分布式事务处理。
 
23）spring-boot-starter-jta-bitronix
通过Bitronix支持JTA分布式事务处理。
 
24）spring-boot-starter-mail
支持javax.mail模块。
 
25）spring-boot-starter-mobile
支持spring-mobile。
 
26）spring-boot-starter-mustache
支持Mustache模板引擎。
 
27）spring-boot-starter-redis
支持Redis键值存储数据库，包括spring-redis。
 
28）spring-boot-starter-security
支持spring-security。
 
29）spring-boot-starter-social-facebook
支持spring-social-facebook
 
30）spring-boot-starter-social-linkedin
支持pring-social-linkedin
 
31）spring-boot-starter-social-twitter
支持pring-social-twitter
 
32）spring-boot-starter-test
支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。
 
33）spring-boot-starter-thymeleaf
支持Thymeleaf模板引擎，包括与Spring的集成。
 
34）spring-boot-starter-velocity
支持Velocity模板引擎。
 
35）spring-boot-starter-web
S支持全栈式Web开发，包括Tomcat和spring-webmvc。
 
36）spring-boot-starter-websocket
支持WebSocket开发。
 
37）spring-boot-starter-ws
支持Spring Web Services。
 
Spring Boot应用启动器面向生产环境的还有2种，具体如下：
 
1）spring-boot-starter-actuator
增加了面向产品上线相关的功能，比如测量和监控。
 
2）spring-boot-starter-remote-shell
增加了远程ssh shell的支持。
 
最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：
 
1）spring-boot-starter-jetty
引入了Jetty HTTP引擎（用于替换Tomcat）。
 
2）spring-boot-starter-log4j
支持Log4J日志框架。
 
3）spring-boot-starter-logging
引入了Spring Boot默认的日志框架Logback。
 
4）spring-boot-starter-tomcat
引入了Spring Boot默认的HTTP引擎Tomcat。
 
5）spring-boot-starter-undertow
引入了Undertow HTTP引擎（用于替换Tomcat）。


项目中的一些信息提示：
//redis 实现的操作
cache:redis实现缓存机制

storage:redis实现仓库机制

jta:redis实现分布式事务，多阶段提交（二阶段提交、三阶段提交降低分布式事务风险）

index:redis实现索引

solr:redis实现搜索功能（ES ）

（spark统计   kafka+stom流式计算）试试统计数据变化


SearchStrategy



第三十七  Spring Boot集成EHCache实现缓存机制【从零开始学Spring Boot】 http://412887952-qq-com.iteye.com/blog/2294952
	Spring Data JPA,Spring Boot 使用Mysql,Spring MVC,EHCache,Spring Cache等（其中@Cacheable请看上一节的理论知识），具体分如下几个步骤：
（1）新建Maven Java Project
（2）在pom.xml中加入依赖包
（3）编写Spring Boot启动类；
（4）配置application.properties;
（5）编写缓存配置类以及ehcache.xml配置文件；
（6）编写DemoInfo实体类进行测试；
（7）编写持久类DemoInfoRepository;
（8）编写处理类DemoInfoService;
（9）编写DemoInfoController测试类；
（10）运行测试；
a、新建maven项目
b、在pom.xml文件中加入相应的依赖包，Spring Boot父节点依赖包；spring boot web支持；缓存依赖spring-context-support；集成ehcache需要的依赖；JPA操作数据库；mysql 数据库驱动，具体pom.xml文件：
	<properties>  
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  
        <!-- 配置JDK编译版本. -->  
        <java.version>1.8</java.version>  
    </properties>  
    <!-- spring boot 父节点依赖,引入这个之后相关的引入就不需要添加version配置，  spring boot会自动选择最合适的版本进行添加。   -->  
    <parent>  
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-starter-parent</artifactId>  
        <version>1.3.3.RELEASE</version>  
    </parent>  
    <dependencies>  
        <!-- 单元测试. -->  
        <dependency>  
            <groupId>junit</groupId>  
            <artifactId>junit</artifactId>  
            <scope>test</scope>  
        </dependency>  
        <!-- spring boot web支持：mvc,aop... -->  
        <dependency>  
            <groupId>org.springframework.boot</groupId>  
            <artifactId>spring-boot-starter-web</artifactId>  
        </dependency>  
        <!--    包含支持UI模版（Velocity，FreeMarker，JasperReports），  邮件服务，   脚本服务(JRuby)，  缓存Cache（EHCache），   任务计划Scheduling（uartz）。  -->  
        <dependency>  
          <groupId>org.springframework</groupId>  
          <artifactId>spring-context-support</artifactId>  
        </dependency>  
        <!-- 集成ehcache需要的依赖-->  
        <dependency>  
            <groupId>net.sf.ehcache</groupId>  
            <artifactId>ehcache</artifactId>  
        </dependency>  
        <!-- JPA操作数据库. -->  
        <dependency>  
          <groupId>org.springframework.boot</groupId>  
          <artifactId>spring-boot-starter-data-jpa</artifactId>  
        </dependency>  
        <!-- mysql 数据库驱动. -->  
        <dependency>  
          <groupId>mysql</groupId>  
          <artifactId>mysql-connector-java</artifactId>  
        </dependency>  
        <!-- Spring boot单元测试. -->  
        <dependency>  
            <groupId>org.springframework.boot</groupId>  
            <artifactId>spring-boot-starter-test</artifactId>  
            <scope>test</scope>  
        </dependency> 
c、编写启动类
@SpringBootApplication
public class App {
    public static void main(String[] args) {
       SpringApplication.run(App.class, args);
    }
}
d、配置application.properties;   
e、编写缓存配置类以及ehcache.xml配置文件：


三十八、分布式session保存到redis
	在使用spring boot做负载均衡的时候，多个app之间的session要保持一致，这样负载到不同的app时候，在一个app登录之后，而访问到另外一台服务器的时候，session丢失。
       常规的解决方案都是使用：如apache使用mod_jk.conf，使用Memcached进行共享。
       在开发spring boot app的时候可以借助 spring session 和redis或者ehcache，用外置的redis或者ehcache来存储session的状态,这里使用redis进行介绍，ehcache实现是一样的。
当前解决分布式信息不能共享（可以使用缓存、redis、zookeeper等第三方插件保存信息，所有这些信息都从第三方获取。只要第三方做好了安全校验即可）

增加相关依赖
<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-redis</artifactId>
    </dependency>
  <dependency>
      <groupId>org.springframework.session</groupId>
      <artifactId>spring-session-data-redis</artifactId>
</dependency>
在可扫描的位置添加
@Configuration
@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 60) //1分钟失效
public class RedisSessionConfig {
}在配置文件中添加属性spring.redis.host=127.0.0.1需要保存的实体均时间Serializable接口
这样在重新登录系统的时候可以发现所有的session均是相同的了
如果需要不同的远端同时登录，则需要根据端类型区分是否生成多个session以及同一个用户不同端生成session的差异
注意redis的版本需要相对较高，否则会提示存储异常

发散思维：
一些变化频繁数据量不大的数据可以存放到redis中，一些变化较少的如果服务器内存足够的情况下可以放到内存中也可以放到redis中.

三十九、spring boot shiro权限管理
	1、先创建一个可访问页面的工程
	2、在工程中添加
		(a) pom.xml中添加Shiro依赖；
		(b) 注入Shiro Factory和SecurityManager。
		(c) 身份认证
		(d) 权限控制
	在Spring中注入类都是使用配置文件的方式，在Spring Boot中是使用注解的方式，那么应该如何进行实现呢？
    Shiro几个核心的类，第一就是ShiroFilterFactory,第二就是SecurityManager，那么最简单的配置就是注入这两个类就ok了

ApplicationListener 通过java方式将类注入到spring中 

        